// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// tables
model User {
  id       String @id @default(uuid())
  password String
  name     String
  surname  String
  email    String
  age      Int
  sex      Sex

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  senderMessages    Message[]     @relation("sender")
  recipientMessages Message[]     @relation("recipient")
  friendshipUser1   Friendship[]  @relation("user1")
  friendshipUser2   Friendship[]  @relation("user2")
  refreshToken      RefreshToken? @relation("refresh_token")
  userOnline        UserOnline?   @relation("user_online")
  userTyping        UserTyping[]  @relation("user_typing")
  userTypingTarget  UserTyping[]  @relation("user_typing_target")

  @@unique([email])
  @@map("user")
}

model UserTyping {
  id           String  @id @default(uuid())
  userId       String  @map("user_id")
  userTargetId String? @map("user_target_id")
  isTyping     Boolean @default(false) @map("is_typing")

  updatedAt DateTime @default(now()) @map("updated_at")

  user       User  @relation("user_typing", fields: [userId], references: [id])
  userTarget User? @relation("user_typing_target", fields: [userTargetId], references: [id])

  @@unique([userId])
}

model UserOnline {
  id       String  @id @default(uuid())
  userId   String  @map("user_id")
  isOnline Boolean @default(false) @map("is_online")

  updatedAt DateTime @default(now()) @map("updated_at")

  user User @relation("user_online", fields: [userId], references: [id])

  @@unique([userId])
}

model Friendship {
  userId1 String @map("user_id_1")
  userId2 String @map("user_id_2")

  createdAt DateTime @default(now()) @map("created_at")

  user1 User @relation("user1", fields: [userId1], references: [id])
  user2 User @relation("user2", fields: [userId2], references: [id])

  @@unique([userId1, userId2])
  @@map("friendship")
}

model RefreshToken {
  id     String @id @default(uuid())
  userId String @map("user_id")
  token  String @db.VarChar(255)

  updatedAt DateTime @default(now()) @map("updated_at")

  user User @relation("refresh_token", fields: [userId], references: [id])

  @@unique([userId])
  @@map("refresh_token")
}

model Message {
  id               String  @id @default(uuid())
  text             String? @db.Text()
  senderId         String  @map("sender_id")
  recipientId      String  @map("recipient_id")
  hasRead          Boolean @default(false) @map("has_read")
  replyToMessageId String? @map("reply_to_message_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  sender             User      @relation("sender", fields: [senderId], references: [id])
  recipient          User      @relation("recipient", fields: [recipientId], references: [id])
  files              File[]    @relation("files")
  replyToMessage     Message?  @relation("reply_to_message", fields: [replyToMessageId], references: [id])
  repliesThisMessage Message[] @relation("reply_to_message")

  @@map("message")
}

model File {
  id           String   @id @default(uuid())
  messageId    String   @map("message_id")
  fileName     String   @map("file_name")
  originalName String?  @map("original_name")
  mimeType     String   @map("mime_type")
  fileType     FileType @default(ATTACHMENT) @map("file_type")
  extension    String?

  createdAt DateTime @default(now()) @map("created_at")

  message Message @relation("files", fields: [messageId], references: [id])

  @@map("file")
}

// enums
enum Sex {
  MALE
  FEMALE
}

enum FileType {
  VOICE_RECORD
  VIDEO_RECORD
  ATTACHMENT
}
